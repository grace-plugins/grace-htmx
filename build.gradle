buildscript {
    repositories {
        // mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }
    dependencies {
        classpath "org.graceframework:grace-gradle-plugin:$graceVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
    }
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : ("${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")
ext.isReleaseVersion = !projectVersion.endsWith("SNAPSHOT")

version projectVersion
group "org.graceframework.plugins"

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "groovy"
// apply plugin: "java-library"
// apply plugin: "org.graceframework.grace-plugin"
apply plugin: "io.github.gradle-nexus.publish-plugin"
apply plugin: "maven-publish"
apply plugin: "signing"

repositories {
    // mavenLocal()
    mavenCentral()
}

dependencies {
    compileOnly "org.springframework.boot:spring-boot-autoconfigure:2.7.10"
    compileOnly "javax.servlet:javax.servlet-api:4.0.1"
    // compileOnly "org.graceframework:grace-boot:$graceVersion"
    compileOnly "org.graceframework:grace-core:$graceVersion"
    compileOnly "org.graceframework:grace-web-common:$graceVersion"
    // profile "org.graceframework.profiles:plugin"
}

tasks.withType(Sign) {
   onlyIf { isReleaseVersion }
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}

// bootJar.enabled = false

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    withJavadocJar()
    withSourcesJar()
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest.mainAttributes(
        "Built-By": System.properties['user.name'],
        "Created-By": System.properties['java.vm.version'] + " (" + System.properties['java.vm.vendor'] + ")",
        "Implementation-Title": "Grace Htmx Plugin",
        "Implementation-Version": projectVersion,
        "Implementation-Vendor": 'Grace Plugins')
    enabled = true
    archiveClassifier.set('')
    includeEmptyDirs = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            from components.java

            pom {
                name = "Grace Htmx Plugin"
                description = "Grace Plugin for using Grace with htmx."
                url = 'https://github.com/grace-plugins/grace-htmx'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'rainboyan'
                        name = 'Michael Yan'
                        email = 'rain@rainboyan.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/grace-plugins/grace-htmx.git'
                    developerConnection = 'scm:git:ssh://github.com:grace-plugins/grace-htmx.git'
                    url = 'https://github.com/grace-plugins/grace-htmx/tree/main'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}
